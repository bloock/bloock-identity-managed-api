// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/credential_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "bloock-identity-managed-api/internal/domain"
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCredentialRepository is a mock of CredentialRepository interface.
type MockCredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialRepositoryMockRecorder
}

// MockCredentialRepositoryMockRecorder is the mock recorder for MockCredentialRepository.
type MockCredentialRepositoryMockRecorder struct {
	mock *MockCredentialRepository
}

// NewMockCredentialRepository creates a new mock instance.
func NewMockCredentialRepository(ctrl *gomock.Controller) *MockCredentialRepository {
	mock := &MockCredentialRepository{ctrl: ctrl}
	mock.recorder = &MockCredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialRepository) EXPECT() *MockCredentialRepositoryMockRecorder {
	return m.recorder
}

// GetCredentialById mocks base method.
func (m *MockCredentialRepository) GetCredentialById(ctx context.Context, id uuid.UUID) (domain.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialById", ctx, id)
	ret0, _ := ret[0].(domain.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialById indicates an expected call of GetCredentialById.
func (mr *MockCredentialRepositoryMockRecorder) GetCredentialById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialById", reflect.TypeOf((*MockCredentialRepository)(nil).GetCredentialById), ctx, id)
}

// Save mocks base method.
func (m *MockCredentialRepository) Save(ctx context.Context, c domain.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCredentialRepositoryMockRecorder) Save(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCredentialRepository)(nil).Save), ctx, c)
}

// UpdateSignatureProof mocks base method.
func (m *MockCredentialRepository) UpdateSignatureProof(ctx context.Context, id uuid.UUID, signatureProof json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignatureProof", ctx, id, signatureProof)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignatureProof indicates an expected call of UpdateSignatureProof.
func (mr *MockCredentialRepositoryMockRecorder) UpdateSignatureProof(ctx, id, signatureProof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignatureProof", reflect.TypeOf((*MockCredentialRepository)(nil).UpdateSignatureProof), ctx, id, signatureProof)
}

// UpdateSparseMtProof mocks base method.
func (m *MockCredentialRepository) UpdateSparseMtProof(ctx context.Context, id uuid.UUID, sparseMtProof json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSparseMtProof", ctx, id, sparseMtProof)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSparseMtProof indicates an expected call of UpdateSparseMtProof.
func (mr *MockCredentialRepositoryMockRecorder) UpdateSparseMtProof(ctx, id, sparseMtProof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSparseMtProof", reflect.TypeOf((*MockCredentialRepository)(nil).UpdateSparseMtProof), ctx, id, sparseMtProof)
}
