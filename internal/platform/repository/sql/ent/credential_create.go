// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bloock-identity-managed-api/internal/platform/repository/sql/ent/credential"
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CredentialCreate is the builder for creating a Credential entity.
type CredentialCreate struct {
	config
	mutation *CredentialMutation
	hooks    []Hook
}

// SetCredentialID sets the "credential_id" field.
func (cc *CredentialCreate) SetCredentialID(u uuid.UUID) *CredentialCreate {
	cc.mutation.SetCredentialID(u)
	return cc
}

// SetAnchorID sets the "anchor_id" field.
func (cc *CredentialCreate) SetAnchorID(i int64) *CredentialCreate {
	cc.mutation.SetAnchorID(i)
	return cc
}

// SetSchemaType sets the "schema_type" field.
func (cc *CredentialCreate) SetSchemaType(s string) *CredentialCreate {
	cc.mutation.SetSchemaType(s)
	return cc
}

// SetIssuerDid sets the "issuer_did" field.
func (cc *CredentialCreate) SetIssuerDid(s string) *CredentialCreate {
	cc.mutation.SetIssuerDid(s)
	return cc
}

// SetHolderDid sets the "holder_did" field.
func (cc *CredentialCreate) SetHolderDid(s string) *CredentialCreate {
	cc.mutation.SetHolderDid(s)
	return cc
}

// SetProofType sets the "proof_type" field.
func (cc *CredentialCreate) SetProofType(s []string) *CredentialCreate {
	cc.mutation.SetProofType(s)
	return cc
}

// SetCredentialData sets the "credential_data" field.
func (cc *CredentialCreate) SetCredentialData(jm json.RawMessage) *CredentialCreate {
	cc.mutation.SetCredentialData(jm)
	return cc
}

// SetSignatureProof sets the "signature_proof" field.
func (cc *CredentialCreate) SetSignatureProof(jm json.RawMessage) *CredentialCreate {
	cc.mutation.SetSignatureProof(jm)
	return cc
}

// SetIntegrityProof sets the "integrity_proof" field.
func (cc *CredentialCreate) SetIntegrityProof(jm json.RawMessage) *CredentialCreate {
	cc.mutation.SetIntegrityProof(jm)
	return cc
}

// SetSparseMtProof sets the "sparse_mt_proof" field.
func (cc *CredentialCreate) SetSparseMtProof(jm json.RawMessage) *CredentialCreate {
	cc.mutation.SetSparseMtProof(jm)
	return cc
}

// Mutation returns the CredentialMutation object of the builder.
func (cc *CredentialCreate) Mutation() *CredentialMutation {
	return cc.mutation
}

// Save creates the Credential in the database.
func (cc *CredentialCreate) Save(ctx context.Context) (*Credential, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CredentialCreate) SaveX(ctx context.Context) *Credential {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CredentialCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CredentialCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CredentialCreate) check() error {
	if _, ok := cc.mutation.CredentialID(); !ok {
		return &ValidationError{Name: "credential_id", err: errors.New(`ent: missing required field "Credential.credential_id"`)}
	}
	if _, ok := cc.mutation.AnchorID(); !ok {
		return &ValidationError{Name: "anchor_id", err: errors.New(`ent: missing required field "Credential.anchor_id"`)}
	}
	if _, ok := cc.mutation.SchemaType(); !ok {
		return &ValidationError{Name: "schema_type", err: errors.New(`ent: missing required field "Credential.schema_type"`)}
	}
	if v, ok := cc.mutation.SchemaType(); ok {
		if err := credential.SchemaTypeValidator(v); err != nil {
			return &ValidationError{Name: "schema_type", err: fmt.Errorf(`ent: validator failed for field "Credential.schema_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IssuerDid(); !ok {
		return &ValidationError{Name: "issuer_did", err: errors.New(`ent: missing required field "Credential.issuer_did"`)}
	}
	if v, ok := cc.mutation.IssuerDid(); ok {
		if err := credential.IssuerDidValidator(v); err != nil {
			return &ValidationError{Name: "issuer_did", err: fmt.Errorf(`ent: validator failed for field "Credential.issuer_did": %w`, err)}
		}
	}
	if _, ok := cc.mutation.HolderDid(); !ok {
		return &ValidationError{Name: "holder_did", err: errors.New(`ent: missing required field "Credential.holder_did"`)}
	}
	if v, ok := cc.mutation.HolderDid(); ok {
		if err := credential.HolderDidValidator(v); err != nil {
			return &ValidationError{Name: "holder_did", err: fmt.Errorf(`ent: validator failed for field "Credential.holder_did": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CredentialData(); !ok {
		return &ValidationError{Name: "credential_data", err: errors.New(`ent: missing required field "Credential.credential_data"`)}
	}
	if _, ok := cc.mutation.SignatureProof(); !ok {
		return &ValidationError{Name: "signature_proof", err: errors.New(`ent: missing required field "Credential.signature_proof"`)}
	}
	return nil
}

func (cc *CredentialCreate) sqlSave(ctx context.Context) (*Credential, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CredentialCreate) createSpec() (*Credential, *sqlgraph.CreateSpec) {
	var (
		_node = &Credential{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(credential.Table, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CredentialID(); ok {
		_spec.SetField(credential.FieldCredentialID, field.TypeUUID, value)
		_node.CredentialID = value
	}
	if value, ok := cc.mutation.AnchorID(); ok {
		_spec.SetField(credential.FieldAnchorID, field.TypeInt64, value)
		_node.AnchorID = value
	}
	if value, ok := cc.mutation.SchemaType(); ok {
		_spec.SetField(credential.FieldSchemaType, field.TypeString, value)
		_node.SchemaType = value
	}
	if value, ok := cc.mutation.IssuerDid(); ok {
		_spec.SetField(credential.FieldIssuerDid, field.TypeString, value)
		_node.IssuerDid = value
	}
	if value, ok := cc.mutation.HolderDid(); ok {
		_spec.SetField(credential.FieldHolderDid, field.TypeString, value)
		_node.HolderDid = value
	}
	if value, ok := cc.mutation.ProofType(); ok {
		_spec.SetField(credential.FieldProofType, field.TypeJSON, value)
		_node.ProofType = value
	}
	if value, ok := cc.mutation.CredentialData(); ok {
		_spec.SetField(credential.FieldCredentialData, field.TypeJSON, value)
		_node.CredentialData = value
	}
	if value, ok := cc.mutation.SignatureProof(); ok {
		_spec.SetField(credential.FieldSignatureProof, field.TypeJSON, value)
		_node.SignatureProof = value
	}
	if value, ok := cc.mutation.IntegrityProof(); ok {
		_spec.SetField(credential.FieldIntegrityProof, field.TypeJSON, value)
		_node.IntegrityProof = value
	}
	if value, ok := cc.mutation.SparseMtProof(); ok {
		_spec.SetField(credential.FieldSparseMtProof, field.TypeJSON, value)
		_node.SparseMtProof = value
	}
	return _node, _spec
}

// CredentialCreateBulk is the builder for creating many Credential entities in bulk.
type CredentialCreateBulk struct {
	config
	builders []*CredentialCreate
}

// Save creates the Credential entities in the database.
func (ccb *CredentialCreateBulk) Save(ctx context.Context) ([]*Credential, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Credential, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CredentialCreateBulk) SaveX(ctx context.Context) []*Credential {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CredentialCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
